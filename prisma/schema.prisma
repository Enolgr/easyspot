datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL") // Ajusta tu variable de entorno .env
}

generator client {
  provider = "prisma-client-js"
}

// ========================
//  USERS
// ========================
model User {
  id             Int      @id @default(autoincrement())
  firebaseUid    String   @unique    // UID de Firebase
  email          String   @unique
  displayName    String?
  phoneNumber    String?
  createdAt      DateTime @default(now())

  // Relations
  orders         Order[]
  tickets        Ticket[]
}

// ========================
//  VENUES
// ========================
model Venue {
  id              Int      @id @default(autoincrement())
  name            String
  city            String
  address         String
  capacity        Int
  contactDetails  String?

  // Relations
  events          Event[]
}

// ========================
//  EVENTS
// ========================
model Event {
  id                Int      @id @default(autoincrement())
  title             String
  venueId           Int?
  dateTime          DateTime
  city              String
  price             Decimal   @db.Decimal(10, 2)
  availableTickets  Int
  description       String?   @db.Text
  poster            String?   @db.Text
  
  // Relation to Venue
  venue   Venue?    @relation(fields: [venueId], references: [id])
  tickets Ticket[]
}

// ========================
//  TICKETS
// ========================
model Ticket {
  id            Int      @id @default(autoincrement())
  userId        Int?
  eventId       Int?
  purchaseDate  DateTime @default(now())
  ticketType    String?

  // Relations
  user    User?   @relation(fields: [userId], references: [id])
  event   Event?  @relation(fields: [eventId], references: [id])
}

// ========================
//  ORDERS
// ========================
model Order {
  id           Int      @id @default(autoincrement())
  userId       Int?
  createdAt    DateTime @default(now())
  totalAmount  Decimal  @db.Decimal(10, 2)
  status       String

  // Relations
  user     User?    @relation(fields: [userId], references: [id])
  payments Payment[]
}

// ========================
//  PAYMENTS
// ========================
model Payment {
  id              Int      @id @default(autoincrement())
  orderId         Int?
  stripePaymentId String?
  paymentDate     DateTime @default(now())
  paymentStatus   String

  // Relation
  order   Order? @relation(fields: [orderId], references: [id])
}
