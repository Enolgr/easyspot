generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int        @id @default(autoincrement())
  firebaseUid String     @unique
  email       String     @unique
  displayName String?
  createdAt   DateTime   @default(now())
  promoter    Boolean    @default(false)
  roleId      Int?
  orders      Order[]
  promoters   Promoter[]
  tickets     Ticket[]
  role        Role?      @relation(fields: [roleId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "FK_User_Role")

  @@index([roleId], map: "FK_User_Role")
}

model Role {
  id        Int        @id @default(autoincrement())
  name      String     @unique(map: "name") @db.VarChar(255)
  promoters Promoter[]
  users     User[]
}

model Venue {
  id             Int     @id @default(autoincrement())
  name           String
  city           String
  address        String
  capacity       Int
  contactDetails String?
  events         Event[]
}

model Event {
  id               Int        @id @default(autoincrement())
  title            String
  venueId          Int?
  dateTime         DateTime
  city             String
  price            Decimal    @db.Decimal(10, 2)
  availableTickets Int
  description      String?    @db.Text
  poster           String?    @db.Text
  category         String?
  venue            Venue?     @relation(fields: [venueId], references: [id])
  promoters        Promoter[]
  tickets          Ticket[]

  @@index([venueId], map: "Event_venueId_fkey")
}

model Ticket {
  id           Int       @id @default(autoincrement())
  userId       Int?
  eventId      Int?
  purchaseDate DateTime  @default(now())
  qr           String    @unique
  orderId      Int?
  validate     Boolean   @default(false)
  validatedAt  DateTime? @db.DateTime(0)
  event        Event?    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  order        Order?    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  user         User?     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([eventId], map: "Ticket_eventId_fkey")
  @@index([orderId], map: "Ticket_orderId_fkey")
  @@index([userId], map: "Ticket_userId_fkey")
}

model Order {
  id          Int       @id @default(autoincrement())
  userId      Int?
  createdAt   DateTime  @default(now())
  totalAmount Decimal   @db.Decimal(10, 2)
  status      String
  user        User?     @relation(fields: [userId], references: [id])
  payments    Payment[]
  tickets     Ticket[]

  @@index([userId], map: "Order_userId_fkey")
}

model Payment {
  id                Int    @id @default(autoincrement())
  orderId           Int
  stripePaymentId   String
  paymentStatus     String
  checkoutSessionId String @unique
  order             Order  @relation(fields: [orderId], references: [id])

  @@index([orderId], map: "Payment_orderId_fkey")
}

model Promoter {
  id      Int   @id @default(autoincrement())
  userId  Int
  eventId Int
  roleId  Int
  user    User  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "promoter_ibfk_1")
  event   Event @relation(fields: [eventId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "promoter_ibfk_2")
  role    Role  @relation(fields: [roleId], references: [id], onUpdate: Restrict, map: "promoter_ibfk_3")

  @@unique([userId, eventId], map: "uniq_user_event")
  @@index([eventId], map: "eventId")
  @@index([roleId], map: "roleId")
}
